function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var styles = {"loading_container":"_2dFcF","loading_text":"_2Go3B","character":"_1euUA","bug":"_blrwG","ghost":"_1Q3fS","green_monster":"_2gC3i","bee":"_2hPnr","hairy_monster":"_1uovL","robot_ball":"_2AP1k","blue_bat":"_1cgdB","paper_bird":"_3uJ-U","puppy":"_2um-x","blink":"_zvTrd"};

var loadingAnimationCharacterArray = ['bug', 'puppy', 'ghost', 'green-monster', 'bee', 'hairy-monster', 'robot-ball', 'blue-bat', 'paper-bird'];

var LoadingAnimation = function LoadingAnimation(props) {
  var _useState = React.useState('bug'),
      selectedLoadingCharacter = _useState[0],
      setSelectedLoadingCharacter = _useState[1];

  var _useState2 = React.useState({}),
      loadingContainerStyleFromProps = _useState2[0],
      setLoadingContainerStyleFromProps = _useState2[1];

  var _useState3 = React.useState({}),
      loadingCharacterStyle = _useState3[0],
      setLoadingCharacterStyle = _useState3[1];

  React.useEffect(function () {
    if (loadingAnimationCharacterArray.includes(props.loadingAnimationVarient)) {
      setSelectedLoadingCharacter(props.loadingAnimationVarient);
    } else {
      setSelectedLoadingCharacter('bug');
    }

    if (props.loadingContainerVisibility) {
      setLoadingContainerStyleFromProps({
        background: props.loadingContainerColor,
        width: props.loadingContainerWidth + "px",
        height: props.loadingContainerHeight + "px",
        border: props.loadingContainerBorder,
        borderRadius: props.loadingContainerRadius + "%",
        boxShadow: props.loadingContainerShadow,
        transform: "scale(" + props.loadingSize + ")"
      });
    } else {
      setLoadingContainerStyleFromProps({
        background: 'transparent',
        transform: "scale(" + props.loadingSize + ")"
      });
    }

    console.log(selectedLoadingCharacter);

    if (props.loadingCharacterDirection === 'right') {
      setLoadingCharacterStyle({
        transform: "translate(-50%, -50%) rotateY(180deg)",
        animationDuration: props.loadingAnimationDelay + "s"
      });
    } else {
      setLoadingCharacterStyle({
        transform: "translate(-50%, -50%)",
        animationDuration: props.loadingAnimationDelay + "s"
      });
    }
  }, [props]);
  console.log(styles);

  var dcd = function dcd() {
    if (selectedLoadingCharacter === 'bug') return styles.bug;else if (selectedLoadingCharacter === 'puppy') return styles.puppy;else if (selectedLoadingCharacter === 'ghost') return styles.ghost;else if (selectedLoadingCharacter === 'green-monster') return styles.green_monster;else if (selectedLoadingCharacter === 'robot-ball') return styles.robot_ball;else if (selectedLoadingCharacter === 'blue-bat') return styles.blue_bat;else if (selectedLoadingCharacter === 'paper-bird') return styles.paper_bird;else if (selectedLoadingCharacter === 'bee') return styles.bee;else if (selectedLoadingCharacter === 'hairy-monster') return styles.hairy_monster;
  };

  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: styles.loading_container,
    style: _extends({}, loadingContainerStyleFromProps, props.loadingContainerStyle)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: styles.character + " \n          \n         " + dcd() + "\n        \n          ",
    style: _extends({}, loadingCharacterStyle, props.loadingAnimationStyle)
  }), /*#__PURE__*/React__default.createElement("p", {
    className: styles.loading_text,
    style: props.loadingTextStyle
  }, props.loadingText, props.loadingDotShow && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("span", null, "."), /*#__PURE__*/React__default.createElement("span", null, "."), /*#__PURE__*/React__default.createElement("span", null, ".")))));
};

LoadingAnimation.defaultProps = {
  loadingSize: 1,
  loadingContainerVisibility: true,
  loadingContainerWidth: 280,
  loadingContainerHeight: 280,
  loadingContainerBorder: '1px solid rgb(0, 0, 0, 0.3)',
  loadingContainerRadius: 50,
  loadingContainerColor: '#d8d8d8',
  loadingContainerShadow: 'inset 15px 15px 10px #999',
  loadingAnimationVarient: 'bug',
  loadingCharacterDirection: 'left',
  loadingAnimationDelay: 1,
  loadingText: 'Loading',
  loadingDotShow: true,
  loadingTextStyle: {},
  loadingAnimationStyle: {},
  loadingContainerStyle: {}
};

module.exports = LoadingAnimation;
//# sourceMappingURL=index.js.map
